#!/usr/bin/perl -w

use File::Basename;
use Getopt::Long;
use Amazon::SQS::Simple;
use Time::HiRes qw(time);

$| = 1;

my %opts;
GetOptions(\%opts, 'reset', 'help', 'delete-queues');

my $scr             = basename($0);
my $max_messages    = shift || 10;
my $base_time       = time();

my $AWSAccessKeyId  = '0QJGP26J6TDAM7FF06G2'; # rtip-scrum@amazon.com
my $SecretKey       = '3a5P6Sz4LDqUlidEHBdebpBPWx9Ck//Cifh6Bsnc';

usage(0) if ($opts{help});
usage(1) if @ARGV || $max_messages =~ /\D/;
    
sub usage {
    my $status = shift || 0;
    print "Usage: $scr [--reset [--delete-queues]] [--help]\n";
    exit($status);
}

use strict;

my $sqs = new Amazon::SQS::Simple($AWSAccessKeyId, $SecretKey);
my $q   = $sqs->CreateQueue("$scr-$$");
print "Using Queue: $q\n";

my $pid = fork();

die "Tried to fork, it didn't work: $!" unless defined($pid);

if ($pid) {
    # PRODUCER
    for my $id (1..$max_messages) {
        printlog("Sending $id");
    
        # pad message to c. 8K
        my $msg = sprintf("$$:%i:%08000i", $id, 0);
        my $message_id = $q->SendMessage($msg);
        printlog("Sent message ID: $message_id");
    }
    wait();
}
else {
    # CONSUMER
    my $count = 0;
    my $requests = 0;

    REQUEST: while ($count < $max_messages) {
        $requests++;
        my $start = time;
        my $msg = $q->ReceiveMessage(VisibilityTimeout => 5);
        my $t_receive = time - $start;
        if (defined $msg) { 
            $count++;
            my ($ppid, $id) = split(/:/, $msg->{MessageBody});
            printlog(sprintf("Received message %s [%i/%i] in %0.3fs", $id, $count, $max_messages, $t_receive));
            printlog("Received message ID: " . $msg->{MessageId});
            $q->DeleteMessage($msg->{MessageId});            
        }
        else {
            printlog('Nothing to receive');
        }
    
        if ($requests >= $max_messages * 10) {
            printlog("$requests requests sent, quitting consumer loop");
            last REQUEST;
        }
    }
}
exit(0);

sub printlog {
    my $msg = shift;
    printf("[%i] %0.3f %s\n", $$, scalar(time - $base_time), $msg);
}
