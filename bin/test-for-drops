#!/usr/bin/perl -w

use File::Basename;
use Amazon::SQS::Simple;
use strict;

$| = 1;

my $scr             = basename($0);
my $max_messages    = shift || 10;

my $AWSAccessKeyId  = $ENV{AWS_ACCESS_KEY};
my $SecretKey       = $ENV{AWS_SECRET_KEY};

my $sqs = new Amazon::SQS::Simple(
    $AWSAccessKeyId,
    $SecretKey,
    # _Debug => \*STDERR, # for debugging info, uncomment and run as test-for-drops 2>debug.log
);
my $q   = $sqs->CreateQueue("$scr-$$");
print "Using Queue: $q\n";

my %message_ids;

for my $body (1..$max_messages) {
    my $message_id;
    eval {
        ($message_id) = split /\|/, $q->SendMessage($body);
    };

    if ($@) {
        print STDERR "Error on calling SendMessage: $@";
    } else {
        print("Sent $body, message ID $message_id\n");
        $message_ids{$message_id}++;
    }
}

my $count = 0;
my $requests = 0;

while ($count < $max_messages && $requests < $max_messages * 4) {
    $requests++;
    my $msg;
    
    eval {
        $msg = $q->ReceiveMessage();
    };

    if ($@) {
        print STDERR "Error on calling ReceiveMessage: $@";
    } elsif (defined $msg) { 
        $count++;
        my $body = $msg->MessageBody();
        my ($id) = split /\|/, $msg->MessageId();

        print("Received $body, message ID $id\n");

        if (exists $message_ids{$id}) {
            $message_ids{$id}--;
        } else {
            print("ERROR $id retrieved but never sent\n");
        }
        
        eval {
            $q->DeleteMessage($msg->MessageId);
        };
        if ($@) {
            print STDERR "Error on calling DeleteMessage: $@";
        }
    }
}

for (sort keys %message_ids) {
    next unless $message_ids{$_};

    if ($message_ids{$_} > 0) {
        print("ERROR: $_ sent but never received\n");
    } elsif ($message_ids{$_} < 0) {
        print("WARN: $_ received more than once\n");
    }
}
